
*, *::after, *::before {
    box-sizing: border-box;
}

body {
    margin: 0; 
    background-color: rgb(68, 87,96); 
}

/* So these are all variables that we can change which 
changes in correlation to the code written*/
:root{
    --bar-width: 50px; 
    --bar-height: 7px; 
    --hamburger-gap: 6px; 
    --foreground: black; 
    --background: white; 
    --hamburger-margin: 5px; 
    --animation-time: 250ms ease-in-out; 
    --hamburger-height: calc(var(--bar-height) * 3 + var(--hamburger-gap) * 2); 
    /* So this calculates the size of the bar/total height becauase
    when we click on it, the bar length goes past the page 
    and we do not want that (X) */ 

    /* ALSO!!! when we perform the calculation, 
    there should not be a line break for the "var", thats why 
    it didnt work lol*/
}

.hamburger-menu::before,
.hamburger-menu::after, 
.hamburger-menu input {

    content: ""; 
    width: var(--bar-width); 
    height: var(--bar-height);
    background-color: var(--foreground);
    border-radius: 8000px; 
    transition: opacity var(--animation-time), 
    width var(--animation-time), rotate var(--animation-time),
    translate var(--animation-time); 
    transform-origin: left center ;   
}



.hamburger-menu{
    display: flex; 
    flex-direction: column; 
    gap: var(--hamburger-gap); 
    width: max-content;  
    position: absolute; 
    top: var(--hamburger-margin);
    left: var(--hamburger-margin);   
    z-index: 2; 
    cursor: pointer;
    --x-width: calc(var(--hamburger-height) * 1.41421356237); 
}

    /* This is a variable and to get the actual length 
    of the diagonal, we need to do some trig. Becasue we are 
    using a right angle, we have to do the square root of 2 
    and also bewcause we are using 45degrees to rotate them.
    So we would just multiply the height in which we found by 
    1.41421356237 */

.hamburger-menu input {
    appearance: none;
    margin: 0; 
    padding:0; 
    outline: none; 
    pointer-events: none; 
}

.hamburger-menu:has(input:checked)::before {
   rotate: 45deg;
   width: var(--x-width); 
   translate: 0 calc(var(--bar-height) / -2 );
}

/* Both of these allow rotation*/
.hamburger-menu:has(input:checked)::after {
    rotate: -45deg; 
    width: var(--x-width);
    translate: 0 calc(var(--bar-height) / 2 );    
}
    

.hamburger-menu input:checked {
    opacity: 0; 
    width: 0; 
}

.sidebar {
    transition: translate var(--animation-time); 
    translate: -100%;
    padding: 0.5em 1rem; 
    padding-top: calc(var(--hamburger-height) + var(--hamburger-margin) + 1rem); 
    background-color: var(--foreground); 
    color:var(--background); 
    max-width: 7rem;
    min-height: 100vh;
    

}

.hamburger-menu:has(input:checked) + .sidebar {
    translate: 0; 

}

.hamburger-menu:has(input:checked){
    --foreground: white; 
    --background: black; 
}

.hamburger-menu:has(input:focus-visible)::before,
.hamburger-menu:has(input:focus-visible)::after, 
.hamburger-menu input:focus-visible  {
    border:2px solid var(--background);
    box-shadow: 0 0 0 1px var(--foreground);


}

#lab{
    Text-align: center; 
    position: relative; 
    bottom: 950px; 
    text-decoration: underline;
    
    
}

/* */
